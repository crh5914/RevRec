import gzip

def int_list(int_str):
    '''
    utility fn for converting an int string to a list of int
    '''
    return [int(w) for w in int_str.split()]
def ChopOrPadLists(docs,maxlen=1000,filler=0):
    docs = [item[:maxlen] for item in docs]
    docs = [item+[fillter]*(maxlen-len(item)) for item in docs]
    return docs

def get_epoch_files(dir_str):
    '''
    get files of the form epochx.gz
    '''
    x = [ f for f in os.listdir(dir_str)]
    x = [ f for f in x if f.endswith('.gz') and f.startswith('epoch')]
    dir_str = dir_str if dir_str.endswith('/') else dir_str + '/'   
    #get full path
    x = [ dir_str + f for f in x]
    return x

class FromDisk():
    def __init__(self, filename):
        '''
        filename is the dataset to iterate on
        '''
        #read the file
        if filename.endswith('.gz'):
            self.fin = gzip.open(filename, 'r')
        else:
            self.fin = open(filename, 'r')
        self.tot_batch = 0
    def _close(self):
        self.fin.close()
    def BatchIter(self, batch_size):    
        '''
        batch size = number of training u,b,r examples in the batch
        returns:
        uList = uA useres
        bList = iB items
        rList: rAB (float)
        user_revlist: the UText converted to int list
        item_revlist: the BText converted to int list
         
        '''
        while True:
            #one batch
            start = time.time()
            uList = []
            bList = []
            rList = []
            uTextList = []
            bTextList = []
            for line in self.fin:
                vals = line.split("\t")
                if len(vals) == 0:
                    continue
                u = vals[0]
                b = vals[1]
                r = float(vals[2])
                uText = vals[3]
                bText = vals[4]
                uList.append(u)
                bList.append(b)
                rList.append(r)
                uTextList.append(int_list(uText))
                bTextList.append(int_list(bText))
                if len(uList) >= batch_size:
                    break
            if len(uList) == 0:
                #end of data
                self._close()
                print('Total Batch gen time = ', (self.tot_batch/60.0), ' min')
                raise StopIteration
            end = time.time()
            bg = (end - start)
            print('Batch gen time = ', bg, ' sec')
            self.tot_batch += bg
            yield uList, bList, rList, uTextList, bTextList
class DataPairMgr:    
    def _int_list(self,int_str):
        '''utility fn for converting an int string to a list of int
        '''
        return [int(w) for w in int_str.split()]   
    def __init__(self, filename):
        '''
        filename: inits the UBRR data from the input file
        '''
        ub_map = dict()
        ub_ratings = dict()
        cnt = 0
        #read the file
        if filename.endswith('.gz'):
            f = gzip.open(filename, 'r')
        else:
            f = open(filename, 'r')
        for line in f:
            vals = line.split("\t")
            if len(vals) == 0:
                continue
            u = vals[0]
            b = vals[1]
            r = float(vals[2])
            d = vals[3].strip()
            ub_map[(u,b)] = self._int_list(d)
            ub_ratings[(u,b)] = r
            cnt += 1
        self.user_item_map = ub_map
        self.user_item_rating = ub_ratings
        f.close()
        print('Data Pair Manager Initialized with ', cnt, ' reviews')     
    def get_int_review(self, user, item):    
        if (user,item) in self.user_item_map:
            return self.user_item_map[(user,item)]
        else:
            return [0]
    def get_int_review_rating(self, user, item):    
        if (user,item) in self.user_item_map:
            return self.user_item_map[(user,item)], self.user_item_rating[(user,item)]
        else:
            return [0], 3.0  #average rating 
